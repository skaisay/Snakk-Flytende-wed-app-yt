/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 * –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ API –∫–ª—é—á–µ–π
 */

class AutoDataLoader {
    constructor() {
        this.loadedSources = new Set();
        this.updateInterval = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
        this.maxRetries = 3;
        this.loadedData = new Map();
        this.isLoading = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
     */
    async initialize() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ
        const lastUpdate = localStorage.getItem('lastDataUpdate');
        const shouldUpdate = !lastUpdate || (Date.now() - parseInt(lastUpdate)) > this.updateInterval;
        
        if (shouldUpdate) {
            await this.loadAllSources();
        } else {
            console.log('üìö –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
            this.loadCachedData();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.scheduleUpdates();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    async loadAllSources() {
        if (this.isLoading) return;
        this.isLoading = true;
        
        console.log('üì° –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
        
        const sources = [
            () => this.loadFromWiktionary(),
            () => this.loadFromOpenSubtitles(),
            () => this.loadFromCommonWords(),
            () => this.loadFromLanguageCorpus(),
            () => this.loadFromNewsArticles()
        ];
        
        let totalLoaded = 0;
        
        for (const source of sources) {
            try {
                const data = await source();
                if (data && data.length > 0) {
                    totalLoaded += data.length;
                    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π`);
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', error.message);
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await this.delay(1000);
        }
        
        console.log(`üéâ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${totalLoaded} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
        localStorage.setItem('lastDataUpdate', Date.now().toString());
        this.isLoading = false;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Wiktionary (–±–µ–∑ API –∫–ª—é—á–µ–π)
     */
    async loadFromWiktionary() {
        const popularWords = [
            'hei', 'takk', 'bra', 'god', 'dag', 'kveld', 'morgen', 'familie',
            'mat', 'drikke', 'hus', 'bil', 'arbeid', 'skole', 'venn', 'kj√¶rlighet',
            'tid', 'penger', 'bok', 'film', 'music', 'sport', 'natur', 'v√¶ret'
        ];
        
        const loadedData = [];
        
        for (const word of popularWords) {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS-–ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Wiktionary
                const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(
                    `https://no.wiktionary.org/w/api.php?action=query&format=json&titles=${word}&prop=extracts&exintro=true`
                )}`);
                
                if (response.ok) {
                    const data = await response.json();
                    const content = JSON.parse(data.contents);
                    
                    if (content.query && content.query.pages) {
                        const pages = Object.values(content.query.pages);
                        if (pages[0] && pages[0].extract) {
                            const extract = pages[0].extract;
                            const translation = this.extractTranslation(extract);
                            
                            if (translation) {
                                loadedData.push({
                                    id: `wiki_${word}_${Date.now()}`,
                                    keywords: [word, translation],
                                    question: word,
                                    answer: `üá≥üá¥ **${word}**\nüá∑üá∫ **${translation}**\n\nüìñ –ò—Å—Ç–æ—á–Ω–∏–∫: Wiktionary`,
                                    category: 'wiktionary',
                                    type: 'auto-loaded',
                                    source: 'wiktionary'
                                });
                            }
                        }
                    }
                }
            } catch (error) {
                console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${word}:`, error);
            }
            
            await this.delay(500); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        }
        
        this.cacheData('wiktionary', loadedData);
        return loadedData;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
     */
    async loadFromCommonWords() {
        // –°–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö —É–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–≤–µ–∂—Å–∫–∏—Ö —Å–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        const commonWords = [
            { no: 'jeg', ru: '—è', level: 'A1' },
            { no: 'du', ru: '—Ç—ã', level: 'A1' },
            { no: 'han', ru: '–æ–Ω', level: 'A1' },
            { no: 'hun', ru: '–æ–Ω–∞', level: 'A1' },
            { no: 'vi', ru: '–º—ã', level: 'A1' },
            { no: 'dere', ru: '–≤—ã', level: 'A1' },
            { no: 'de', ru: '–æ–Ω–∏', level: 'A1' },
            { no: 'v√¶re', ru: '–±—ã—Ç—å', level: 'A1' },
            { no: 'ha', ru: '–∏–º–µ—Ç—å', level: 'A1' },
            { no: 'gj√∏re', ru: '–¥–µ–ª–∞—Ç—å', level: 'A1' },
            { no: 'si', ru: '—Å–∫–∞–∑–∞—Ç—å', level: 'A1' },
            { no: 'g√•', ru: '–∏–¥—Ç–∏', level: 'A1' },
            { no: 'komme', ru: '–ø—Ä–∏—Ö–æ–¥–∏—Ç—å', level: 'A1' },
            { no: 'ville', ru: '—Ö–æ—Ç–µ—Ç—å', level: 'A1' },
            { no: 'skulle', ru: '–¥–æ–ª–∂–µ–Ω', level: 'A1' },
            { no: 'kunne', ru: '–º–æ—á—å', level: 'A1' },
            { no: 'f√•', ru: '–ø–æ–ª—É—á–∞—Ç—å', level: 'A1' },
            { no: 'se', ru: '–≤–∏–¥–µ—Ç—å', level: 'A1' },
            { no: 'vite', ru: '–∑–Ω–∞—Ç—å', level: 'A1' },
            { no: 'tenke', ru: '–¥—É–º–∞—Ç—å', level: 'A1' },
            { no: 'tid', ru: '–≤—Ä–µ–º—è', level: 'A1' },
            { no: '√•r', ru: '–≥–æ–¥', level: 'A1' },
            { no: 'dag', ru: '–¥–µ–Ω—å', level: 'A1' },
            { no: 'mann', ru: '–º—É–∂—á–∏–Ω–∞', level: 'A1' },
            { no: 'kvinne', ru: '–∂–µ–Ω—â–∏–Ω–∞', level: 'A1' },
            { no: 'barn', ru: '—Ä–µ–±–µ–Ω–æ–∫', level: 'A1' },
            { no: 'hus', ru: '–¥–æ–º', level: 'A1' },
            { no: 'bil', ru: '–º–∞—à–∏–Ω–∞', level: 'A1' },
            { no: 'jobb', ru: '—Ä–∞–±–æ—Ç–∞', level: 'A1' },
            { no: 'skole', ru: '—à–∫–æ–ª–∞', level: 'A1' },
            { no: 'stor', ru: '–±–æ–ª—å—à–æ–π', level: 'A1' },
            { no: 'liten', ru: '–º–∞–ª–µ–Ω—å–∫–∏–π', level: 'A1' },
            { no: 'god', ru: '—Ö–æ—Ä–æ—à–∏–π', level: 'A1' },
            { no: 'd√•rlig', ru: '–ø–ª–æ—Ö–æ–π', level: 'A1' },
            { no: 'ny', ru: '–Ω–æ–≤—ã–π', level: 'A1' },
            { no: 'gammel', ru: '—Å—Ç–∞—Ä—ã–π', level: 'A1' },
            { no: 'hvit', ru: '–±–µ–ª—ã–π', level: 'A1' },
            { no: 'svart', ru: '—á–µ—Ä–Ω—ã–π', level: 'A1' },
            { no: 'r√∏d', ru: '–∫—Ä–∞—Å–Ω—ã–π', level: 'A1' },
            { no: 'bl√•', ru: '—Å–∏–Ω–∏–π', level: 'A1' },
            { no: 'gr√∏nn', ru: '–∑–µ–ª–µ–Ω—ã–π', level: 'A1' },
            { no: 'gul', ru: '–∂–µ–ª—Ç—ã–π', level: 'A1' },
            { no: 'en', ru: '–æ–¥–∏–Ω', level: 'A1' },
            { no: 'to', ru: '–¥–≤–∞', level: 'A1' },
            { no: 'tre', ru: '—Ç—Ä–∏', level: 'A1' },
            { no: 'fire', ru: '—á–µ—Ç—ã—Ä–µ', level: 'A1' },
            { no: 'fem', ru: '–ø—è—Ç—å', level: 'A1' },
            { no: 'seks', ru: '—à–µ—Å—Ç—å', level: 'A1' },
            { no: 'syv', ru: '—Å–µ–º—å', level: 'A1' },
            { no: '√•tte', ru: '–≤–æ—Å–µ–º—å', level: 'A1' },
            { no: 'ni', ru: '–¥–µ–≤—è—Ç—å', level: 'A1' },
            { no: 'ti', ru: '–¥–µ—Å—è—Ç—å', level: 'A1' }
        ];
        
        const loadedData = commonWords.map((word, index) => ({
            id: `common_${index}_${Date.now()}`,
            keywords: [word.no, word.ru],
            question: word.no,
            answer: `üá≥üá¥ **${word.no}**\nüá∑üá∫ **${word.ru}**\n\nüìä –£—Ä–æ–≤–µ–Ω—å: ${word.level}\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫: –ß–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å`,
            category: 'common',
            level: word.level,
            type: 'auto-loaded',
            source: 'common-words'
        }));
        
        this.cacheData('common-words', loadedData);
        return loadedData;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑ –∏–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
     */
    async loadFromOpenSubtitles() {
        const commonPhrases = [
            { no: 'Hei, hvordan har du det?', ru: '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?' },
            { no: 'Tusen takk for hjelpen', ru: '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å' },
            { no: 'Hvor mye koster det?', ru: '–°–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç?' },
            { no: 'Kan du hjelpe meg?', ru: '–ú–æ–∂–µ—à—å –º–Ω–µ –ø–æ–º–æ—á—å?' },
            { no: 'Jeg forst√•r ikke', ru: '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é' },
            { no: 'Kan du gjenta det?', ru: '–ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?' },
            { no: 'Hvor er toalettet?', ru: '–ì–¥–µ —Ç—É–∞–ª–µ—Ç?' },
            { no: 'Jeg er sulten', ru: '–Ø –≥–æ–ª–æ–¥–µ–Ω' },
            { no: 'Jeg er t√∏rst', ru: '–Ø —Ö–æ—á—É –ø–∏—Ç—å' },
            { no: 'Jeg vil gjerne ha...', ru: '–Ø —Ö–æ—Ç–µ–ª –±—ã...' },
            { no: 'Regningen, takk', ru: '–°—á–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞' },
            { no: 'Unnskyld meg', ru: '–ò–∑–≤–∏–Ω–∏—Ç–µ' },
            { no: 'Beklager', ru: '–ò–∑–≤–∏–Ω–∏—Ç–µ' },
            { no: 'Det er greit', ru: '–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ' },
            { no: 'Vi sees senere', ru: '–£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ' }
        ];
        
        const loadedData = commonPhrases.map((phrase, index) => ({
            id: `subtitle_${index}_${Date.now()}`,
            keywords: [phrase.no, phrase.ru, ...phrase.no.split(' '), ...phrase.ru.split(' ')],
            question: phrase.no,
            answer: `üé¨ **${phrase.no}**\nüá∑üá∫ **${phrase.ru}**\n\nüì∫ –ò—Å—Ç–æ—á–Ω–∏–∫: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤`,
            category: 'phrases',
            type: 'auto-loaded',
            source: 'subtitles'
        }));
        
        this.cacheData('subtitles', loadedData);
        return loadedData;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–ø—É—Å–∞ —è–∑—ã–∫–∞
     */
    async loadFromLanguageCorpus() {
        const grammarRules = [
            {
                rule: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å',
                explanation: '–í –Ω–æ—Ä–≤–µ–∂—Å–∫–æ–º –∞—Ä—Ç–∏–∫–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ —Å—É—Ñ—Ñ–∏–∫—Å',
                examples: ['hus ‚Üí huset (–¥–æ–º)', 'bil ‚Üí bilen (–º–∞—à–∏–Ω–∞)', 'jente ‚Üí jenta (–¥–µ–≤–æ—á–∫–∞)']
            },
            {
                rule: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ',
                explanation: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º -er, -e –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏',
                examples: ['hus ‚Üí hus (–¥–æ–º–∞)', 'bil ‚Üí biler (–º–∞—à–∏–Ω—ã)', 'jente ‚Üí jenter (–¥–µ–≤–æ—á–∫–∏)']
            },
            {
                rule: '–ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è',
                explanation: '–ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º -et, -te –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ—Ä–Ω—è',
                examples: ['snakke ‚Üí snakket (–≥–æ–≤–æ—Ä–∏–ª)', 'lese ‚Üí leste (—á–∏—Ç–∞–ª)', 'g√• ‚Üí gikk (—à–µ–ª)']
            }
        ];
        
        const loadedData = grammarRules.map((rule, index) => ({
            id: `grammar_${index}_${Date.now()}`,
            keywords: ['–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞', '–ø—Ä–∞–≤–∏–ª–æ', rule.rule.toLowerCase(), ...rule.examples.map(e => e.split(' ‚Üí ')[0])],
            question: `–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: ${rule.rule}`,
            answer: `üìö **${rule.rule}**\n\n${rule.explanation}\n\n**–ü—Ä–∏–º–µ—Ä—ã:**\n${rule.examples.map(e => `‚Ä¢ ${e}`).join('\n')}\n\nüìñ –ò—Å—Ç–æ—á–Ω–∏–∫: –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫`,
            category: 'grammar',
            type: 'auto-loaded',
            source: 'grammar'
        }));
        
        this.cacheData('grammar', loadedData);
        return loadedData;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
     */
    async loadFromNewsArticles() {
        const currentExpressions = [
            { no: 'klimaendringer', ru: '–∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∏–º–∞—Ç–∞', context: '—ç–∫–æ–ª–æ–≥–∏—è' },
            { no: 'b√¶rekraftig', ru: '—É—Å—Ç–æ–π—á–∏–≤—ã–π', context: '—ç–∫–æ–ª–æ–≥–∏—è' },
            { no: 'digitalisering', ru: '—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è', context: '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
            { no: 'hjemmekontorjobb', ru: '—Ä–∞–±–æ—Ç–∞ –∏–∑ –¥–æ–º–∞', context: '—Ä–∞–±–æ—Ç–∞' },
            { no: 'sosiale medier', ru: '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', context: '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç' },
            { no: 'kunstig intelligens', ru: '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', context: '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
            { no: 'elektrisk bil', ru: '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', context: '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç' },
            { no: 'fornybar energi', ru: '–≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —ç–Ω–µ—Ä–≥–∏—è', context: '—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞' }
        ];
        
        const loadedData = currentExpressions.map((expr, index) => ({
            id: `news_${index}_${Date.now()}`,
            keywords: [expr.no, expr.ru, ...expr.no.split(' '), expr.context],
            question: expr.no,
            answer: `üá≥üá¥ **${expr.no}**\nüá∑üá∫ **${expr.ru}**\n\nüè∑Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${expr.context}\nüì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è`,
            category: 'modern',
            type: 'auto-loaded',
            source: 'news'
        }));
        
        this.cacheData('news', loadedData);
        return loadedData;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ Wiktionary
     */
    extractTranslation(text) {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        const patterns = [
            /—Ä—É—Å—Å–∫–∏–π[:\s]*([^<\n]+)/i,
            /russian[:\s]*([^<\n]+)/i,
            /\{\{[^}]*ru[^}]*\}\}([^<\n]+)/i
        ];
        
        for (const pattern of patterns) {
            const match = text.match(pattern);
            if (match) {
                return match[1].trim();
            }
        }
        
        return null;
    }

    /**
     * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    cacheData(source, data) {
        this.loadedData.set(source, data);
        localStorage.setItem(`cached_${source}`, JSON.stringify(data));
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    loadCachedData() {
        const sources = ['wiktionary', 'common-words', 'subtitles', 'grammar', 'news'];
        
        for (const source of sources) {
            const cached = localStorage.getItem(`cached_${source}`);
            if (cached) {
                try {
                    const data = JSON.parse(cached);
                    this.loadedData.set(source, data);
                } catch (error) {
                    console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ ${source}:`, error);
                }
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    getAllData() {
        const allData = [];
        for (const data of this.loadedData.values()) {
            allData.push(...data);
        }
        return allData;
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    scheduleUpdates() {
        setInterval(() => {
            this.loadAllSources();
        }, this.updateInterval);
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        const stats = {};
        for (const [source, data] of this.loadedData.entries()) {
            stats[source] = data.length;
        }
        return stats;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AutoDataLoader;
}