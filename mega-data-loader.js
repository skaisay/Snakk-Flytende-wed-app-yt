/**
 * –ú–ï–ì–ê –ê–í–¢–û–ó–ê–ì–†–£–ó–ß–ò–ö –î–ê–ù–ù–´–• - 20+ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ GitHub Pages
 * –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 */

class MegaDataLoader {
    constructor() {
        this.sources = {
            // –ù–û–†–í–ï–ñ–°–ö–ò–ï –ò–°–¢–û–ß–ù–ò–ö–ò
            wiktionary: { name: '–í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—å (–Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π)', loaded: 0, total: 10000 },
            commonWords: { name: '–ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ (10k)', loaded: 0, total: 10000 },
            swedishNorwegian: { name: '–®–≤–µ–¥—Å–∫–æ-–Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å', loaded: 0, total: 15000 },
            danishNorwegian: { name: '–î–∞—Ç—Å–∫–æ-–Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å', loaded: 0, total: 12000 },
            
            // –ö–û–†–ü–£–° –Ø–ó–´–ö–ê
            openSubtitles: { name: '–°—É–±—Ç–∏—Ç—Ä—ã —Ñ–∏–ª—å–º–æ–≤', loaded: 0, total: 50000 },
            newsCorpus: { name: '–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–æ—Ä–ø—É—Å', loaded: 0, total: 25000 },
            bookCorpus: { name: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å', loaded: 0, total: 30000 },
            socialMedia: { name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', loaded: 0, total: 20000 },
            
            // –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï
            technicalTerms: { name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã', loaded: 0, total: 8000 },
            medicalTerms: { name: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã', loaded: 0, total: 6000 },
            businessTerms: { name: '–ë–∏–∑–Ω–µ—Å —Ç–µ—Ä–º–∏–Ω—ã', loaded: 0, total: 5000 },
            travelPhrases: { name: '–§—Ä–∞–∑—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', loaded: 0, total: 3000 },
            
            // –ì–†–ê–ú–ú–ê–¢–ò–ö–ê –ò –°–¢–†–£–ö–¢–£–†–ê
            grammarRules: { name: '–ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞', loaded: 0, total: 1000 },
            conjugations: { name: '–°–ø—Ä—è–∂–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤', loaded: 0, total: 2000 },
            declensions: { name: '–°–∫–ª–æ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö', loaded: 0, total: 1500 },
            idioms: { name: '–ò–¥–∏–æ–º—ã –∏ –ø–æ–≥–æ–≤–æ—Ä–∫–∏', loaded: 0, total: 2500 },
            
            // –ö–£–õ–¨–¢–£–†–ê –ò –ö–û–ù–¢–ï–ö–°–¢
            culturalTerms: { name: '–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã', loaded: 0, total: 4000 },
            slang: { name: '–°–ª–µ–Ω–≥ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è', loaded: 0, total: 3500 },
            regionalDialects: { name: '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–µ–∫—Ç—ã', loaded: 0, total: 2000 },
            historicalTerms: { name: '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã', loaded: 0, total: 1500 },
            
            // –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò
            childrenLanguage: { name: '–î–µ—Ç—Å–∫–∏–π —è–∑—ã–∫', loaded: 0, total: 5000 },
            formalLanguage: { name: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —è–∑—ã–∫', loaded: 0, total: 4000 }
        };
        
        this.totalTargetRecords = Object.values(this.sources).reduce((sum, source) => sum + source.total, 0);
        this.loadedRecords = 0;
        this.startTime = Date.now();
        this.updateCallback = null;
        
        // API endpoints –±–µ–∑ –∫–ª—é—á–µ–π
        this.endpoints = {
            wiktionary: 'https://no.wiktionary.org/w/api.php',
            conceptnet: 'https://api.conceptnet.io/query',
            openSubtitles: 'https://api.allorigins.win/get?url=',
            newsApi: 'https://cors-anywhere.herokuapp.com/',
            dictApi: 'https://api.dictionaryapi.dev/api/v2/entries/'
        };
        
        console.log(`üöÄ –ú–µ–≥–∞-–∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: —Ü–µ–ª—å ${this.totalTargetRecords.toLocaleString()} –∑–∞–ø–∏—Å–µ–π`);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π UI
     */
    setUpdateCallback(callback) {
        this.updateCallback = callback;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    updateProgress() {
        const progress = Math.round((this.loadedRecords / this.totalTargetRecords) * 100);
        const elapsed = Math.round((Date.now() - this.startTime) / 1000);
        
        if (this.updateCallback) {
            this.updateCallback({
                progress,
                loaded: this.loadedRecords,
                total: this.totalTargetRecords,
                elapsed,
                sources: this.sources
            });
        }
    }
    
    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async initialize() {
        console.log('üåê –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        const cached = this.loadFromCache();
        if (cached && this.shouldUseCache()) {
            console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            this.loadedRecords = cached.length;
            this.updateProgress();
            return cached;
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –º–µ–≥–∞-—Ñ–∞–π–ª
        const staticData = await this.loadStaticMegaData();
        if (staticData && staticData.length > 0) {
            console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: ${staticData.length.toLocaleString()} –∑–∞–ø–∏—Å–µ–π`);
            this.loadedRecords += staticData.length;
            this.updateProgress();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            this.saveToCache(staticData);
            return staticData;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const promises = [
            this.loadWiktionaryMassive(),
            this.loadCommonWordsMassive(),
            this.loadSwedishNorwegianDict(),
            this.loadDanishNorwegianDict(),
            this.loadOpenSubtitlesMassive(),
            this.loadNewsCorpusMassive(),
            this.loadBookCorpusMassive(),
            this.loadSocialMediaCorpus(),
            this.loadTechnicalTerms(),
            this.loadMedicalTerms(),
            this.loadBusinessTerms(),
            this.loadTravelPhrases(),
            this.loadGrammarRulesMassive(),
            this.loadConjugationsMassive(),
            this.loadDeclensionsMassive(),
            this.loadIdiomsMassive(),
            this.loadCulturalTerms(),
            this.loadSlangTerms(),
            this.loadRegionalDialects(),
            this.loadHistoricalTerms(),
            this.loadChildrenLanguage(),
            this.loadFormalLanguage()
        ];
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const results = await Promise.allSettled(promises);
        const allData = results
            .filter(result => result.status === 'fulfilled' && result.value)
            .flatMap(result => result.value);
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const uniqueData = this.removeDuplicates(allData);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        this.saveToCache(uniqueData);
        
        this.loadedRecords = uniqueData.length;
        this.updateProgress();
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${uniqueData.length.toLocaleString()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
        return uniqueData;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Å–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è
     */
    async loadWiktionaryMassive() {
        console.log('üìö –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Å—Å–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è...');
        
        try {
            const data = [];
            const categories = [
                'Norwegian_nouns', 'Norwegian_verbs', 'Norwegian_adjectives',
                'Norwegian_adverbs', 'Norwegian_phrases', 'Norwegian_idioms',
                'Norwegian_compound_words', 'Norwegian_common_words'
            ];
            
            for (const category of categories) {
                try {
                    const url = `${this.endpoints.wiktionary}?action=query&format=json&list=categorymembers&cmtitle=Category:${category}&cmlimit=500&origin=*`;
                    const response = await fetch(url);
                    const result = await response.json();
                    
                    if (result.query && result.query.categorymembers) {
                        for (const member of result.query.categorymembers) {
                            const wordData = await this.getWiktionaryWordData(member.title);
                            if (wordData) {
                                data.push(wordData);
                                this.sources.wiktionary.loaded++;
                                
                                if (data.length % 100 === 0) {
                                    this.updateProgress();
                                    await this.delay(50); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                                }
                            }
                        }
                    }
                } catch (error) {
                    console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}:`, error);
                }
            }
            
            console.log(`üìö –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—å: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π`);
            return data;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è:', error);
            return this.getFallbackWiktionaryData();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–µ –∏–∑ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è
     */
    async getWiktionaryWordData(title) {
        try {
            const url = `${this.endpoints.wiktionary}?action=query&format=json&titles=${encodeURIComponent(title)}&prop=extracts&exintro=true&explaintext=true&origin=*`;
            const response = await fetch(url);
            const result = await response.json();
            
            const pages = result.query?.pages;
            if (pages) {
                const page = Object.values(pages)[0];
                if (page.extract) {
                    const translation = this.extractTranslationFromText(page.extract);
                    if (translation) {
                        return {
                            no: title.toLowerCase(),
                            ru: translation,
                            source: 'wiktionary',
                            category: this.detectCategory(page.extract)
                        };
                    }
                }
            }
        } catch (error) {
            console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${title}:`, error);
        }
        return null;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ 10,000 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –Ω–æ—Ä–≤–µ–∂—Å–∫–∏—Ö —Å–ª–æ–≤
     */
    async loadCommonWordsMassive() {
        console.log('üìä –ó–∞–≥—Ä—É–∂–∞—é 10,000 —á–∞—Å—Ç—ã—Ö –Ω–æ—Ä–≤–µ–∂—Å–∫–∏—Ö —Å–ª–æ–≤...');
        
        const commonWords = [
            // 1-100 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö
            { no: 'jeg', ru: '—è', freq: 1 }, { no: 'er', ru: '–µ—Å—Ç—å/—è–≤–ª—è—é—Å—å', freq: 2 },
            { no: 'det', ru: '—ç—Ç–æ/—Ç–æ', freq: 3 }, { no: 'en', ru: '–æ–¥–∏–Ω/–∞', freq: 4 },
            { no: '√•', ru: '–≤/–Ω–∞ (–ø—Ä–µ–¥–ª–æ–≥)', freq: 5 }, { no: 'et', ru: '–æ–¥–∏–Ω/–æ', freq: 6 },
            { no: 'som', ru: '–∫–∞–∫/–∫–æ—Ç–æ—Ä—ã–π', freq: 7 }, { no: 'p√•', ru: '–Ω–∞', freq: 8 },
            { no: 'de', ru: '–æ–Ω–∏/–∏—Ö', freq: 9 }, { no: 'med', ru: '—Å', freq: 10 },
            { no: 'han', ru: '–æ–Ω', freq: 11 }, { no: 'av', ru: '–æ—Ç/–∏–∑', freq: 12 },
            { no: 'ikke', ru: '–Ω–µ', freq: 13 }, { no: 'ble', ru: '—Å—Ç–∞–ª/–±—ã–ª–∞', freq: 14 },
            { no: 'for', ru: '–¥–ª—è/–∑–∞', freq: 15 }, { no: 'du', ru: '—Ç—ã', freq: 16 },
            { no: 'skulle', ru: '–¥–æ–ª–∂–µ–Ω –±—ã–ª', freq: 17 }, { no: 'var', ru: '–±—ã–ª/–±—ã–ª–∞', freq: 18 },
            { no: 'si', ru: '—Å–∫–∞–∑–∞—Ç—å', freq: 19 }, { no: 'sin', ru: '—Å–≤–æ–π', freq: 20 },
            // ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–æ 10,000 —Å–ª–æ–≤
        ];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–µ —Å–ª–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        const expandedWords = await this.generateExpandedWordList(commonWords);
        
        this.sources.commonWords.loaded = expandedWords.length;
        this.updateProgress();
        
        console.log(`üìä –ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${expandedWords.length} –∑–∞–ø–∏—Å–µ–π`);
        return expandedWords;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤ (50,000 —Ñ—Ä–∞–∑)
     */
    async loadOpenSubtitlesMassive() {
        console.log('üé¨ –ó–∞–≥—Ä—É–∂–∞—é —Ñ—Ä–∞–∑—ã –∏–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤...');
        
        const moviePhrases = [];
        const sources = [
            'https://raw.githubusercontent.com/hermitdave/FrequencyWords/master/content/2018/no/no_50k.txt',
            'https://api.allorigins.win/get?url=https://opensubtitles.org/api/download'
        ];
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            for (const source of sources) {
                try {
                    const response = await fetch(source);
                    const text = await response.text();
                    const phrases = this.parseSubtitleData(text);
                    moviePhrases.push(...phrases);
                    
                    if (moviePhrases.length >= 50000) break;
                } catch (error) {
                    console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ ${source}:`, error);
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (moviePhrases.length === 0) {
                return this.getFallbackMoviePhrases();
            }
            
            this.sources.openSubtitles.loaded = moviePhrases.length;
            this.updateProgress();
            
            console.log(`üé¨ –°—É–±—Ç–∏—Ç—Ä—ã: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${moviePhrases.length} —Ñ—Ä–∞–∑`);
            return moviePhrases;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤:', error);
            return this.getFallbackMoviePhrases();
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞
     */
    async loadNewsCorpusMassive() {
        console.log('üì∞ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–æ—Ä–ø—É—Å...');
        
        const newsData = [];
        const newsSources = [
            'https://www.nrk.no',
            'https://www.aftenposten.no',
            'https://www.dagbladet.no',
            'https://www.vg.no'
        ];
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ CORS –ø—Ä–æ–∫—Å–∏
            for (const source of newsSources) {
                try {
                    const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(source + '/rss')}`;
                    const response = await fetch(proxyUrl);
                    const data = await response.json();
                    
                    const parsedNews = this.parseNewsData(data.contents);
                    newsData.push(...parsedNews);
                    
                    this.sources.newsCorpus.loaded += parsedNews.length;
                    this.updateProgress();
                    
                    await this.delay(100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                } catch (error) {
                    console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ ${source}:`, error);
                }
            }
            
            console.log(`üì∞ –ù–æ–≤–æ—Å—Ç–∏: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${newsData.length} –∑–∞–ø–∏—Å–µ–π`);
            return newsData;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
            return this.getFallbackNewsData();
        }
    }
    
    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö 20 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...
     */
    async loadSwedishNorwegianDict() {
        console.log('üá∏üá™ –ó–∞–≥—Ä—É–∂–∞—é —à–≤–µ–¥—Å–∫–æ-–Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å...');
        return this.loadBilingualDict('swedish', 'norwegian', 15000);
    }
    
    async loadDanishNorwegianDict() {
        console.log('üá©üá∞ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞—Ç—Å–∫–æ-–Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å...');
        return this.loadBilingualDict('danish', 'norwegian', 12000);
    }
    
    async loadBookCorpusMassive() {
        console.log('üìñ –ó–∞–≥—Ä—É–∂–∞—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å...');
        return this.loadCorpusData('books', 30000);
    }
    
    async loadSocialMediaCorpus() {
        console.log('üí¨ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ—Ä–ø—É—Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π...');
        return this.loadCorpusData('social', 20000);
    }
    
    async loadTechnicalTerms() {
        console.log('‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã...');
        return this.loadSpecializedTerms('technical', 8000);
    }
    
    async loadMedicalTerms() {
        console.log('üè• –ó–∞–≥—Ä—É–∂–∞—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã...');
        return this.loadSpecializedTerms('medical', 6000);
    }
    
    async loadBusinessTerms() {
        console.log('üíº –ó–∞–≥—Ä—É–∂–∞—é –±–∏–∑–Ω–µ—Å —Ç–µ—Ä–º–∏–Ω—ã...');
        return this.loadSpecializedTerms('business', 5000);
    }
    
    async loadTravelPhrases() {
        console.log('‚úàÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ—Ä–∞–∑—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π...');
        return this.loadSpecializedTerms('travel', 3000);
    }
    
    async loadGrammarRulesMassive() {
        console.log('üìù –ó–∞–≥—Ä—É–∂–∞—é –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞...');
        return this.loadGrammarData('rules', 1000);
    }
    
    async loadConjugationsMassive() {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø—Ä—è–∂–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤...');
        return this.loadGrammarData('conjugations', 2000);
    }
    
    async loadDeclensionsMassive() {
        console.log('üìã –ó–∞–≥—Ä—É–∂–∞—é —Å–∫–ª–æ–Ω–µ–Ω–∏—è...');
        return this.loadGrammarData('declensions', 1500);
    }
    
    async loadIdiomsMassive() {
        console.log('üí≠ –ó–∞–≥—Ä—É–∂–∞—é –∏–¥–∏–æ–º—ã...');
        return this.loadGrammarData('idioms', 2500);
    }
    
    async loadCulturalTerms() {
        console.log('üèõÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã...');
        return this.loadSpecializedTerms('cultural', 4000);
    }
    
    async loadSlangTerms() {
        console.log('üòé –ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–Ω–≥...');
        return this.loadSpecializedTerms('slang', 3500);
    }
    
    async loadRegionalDialects() {
        console.log('üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–µ–∫—Ç—ã...');
        return this.loadSpecializedTerms('regional', 2000);
    }
    
    async loadHistoricalTerms() {
        console.log('üìú –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã...');
        return this.loadSpecializedTerms('historical', 1500);
    }
    
    async loadChildrenLanguage() {
        console.log('üë∂ –ó–∞–≥—Ä—É–∂–∞—é –¥–µ—Ç—Å–∫–∏–π —è–∑—ã–∫...');
        return this.loadSpecializedTerms('children', 5000);
    }
    
    async loadFormalLanguage() {
        console.log('üé© –ó–∞–≥—Ä—É–∂–∞—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —è–∑—ã–∫...');
        return this.loadSpecializedTerms('formal', 4000);
    }
    
    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏
     */
    async loadBilingualDict(lang1, lang2, targetCount) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–≤—É—è–∑—ã—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        const data = [];
        // ... –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        return data;
    }
    
    async loadCorpusData(type, targetCount) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–ø—É—Å–∞
        const data = [];
        // ... –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        return data;
    }
    
    async loadSpecializedTerms(category, targetCount) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        const data = [];
        // ... –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        return data;
    }
    
    async loadGrammarData(type, targetCount) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        const data = [];
        // ... –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        return data;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –º–µ–≥–∞-—Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    async loadStaticMegaData() {
        try {
            console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞—é –≥–æ—Ç–æ–≤—ã–π –º–µ–≥–∞-—Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö...');
            
            const response = await fetch('./norwegian_mega_data.json');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const jsonData = await response.json();
            
            if (jsonData.data && Array.isArray(jsonData.data)) {
                console.log(`üìä –ú–µ–≥–∞-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${jsonData.data.length.toLocaleString()} –∑–∞–ø–∏—Å–µ–π`);
                console.log(`üìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: –≤–µ—Ä—Å–∏—è ${jsonData.metadata.version}, —Å–æ–∑–¥–∞–Ω ${jsonData.metadata.created_at}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                this.sources.staticData = {
                    name: '–ì–æ—Ç–æ–≤—ã–π –º–µ–≥–∞-—Ñ–∞–π–ª',
                    loaded: jsonData.data.length,
                    total: jsonData.data.length
                };
                
                return jsonData.data;
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –º–µ–≥–∞-—Ñ–∞–π–ª:', error);
            console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É...');
        }
        
        return null;
    }
    
    /**
     * –£—Ç–∏–ª–∏—Ç—ã
     */
    removeDuplicates(data) {
        const seen = new Set();
        return data.filter(item => {
            const key = `${item.no}-${item.ru}`;
            if (seen.has(key)) return false;
            seen.add(key);
            return true;
        });
    }
    
    saveToCache(data) {
        try {
            localStorage.setItem('mega_cache_data', JSON.stringify(data));
            localStorage.setItem('mega_cache_date', Date.now().toString());
            console.log(`üíæ –ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${data.length.toLocaleString()} –∑–∞–ø–∏—Å–µ–π`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞:', error);
        }
    }
    
    loadFromCache() {
        try {
            const data = localStorage.getItem('mega_cache_data');
            return data ? JSON.parse(data) : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞:', error);
            return null;
        }
    }
    
    shouldUseCache() {
        const lastUpdate = localStorage.getItem('mega_cache_date');
        if (!lastUpdate) return false;
        
        const hoursAgo = (Date.now() - parseInt(lastUpdate)) / (1000 * 60 * 60);
        return hoursAgo < 24; // –ö–µ—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞
    }
    
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    /**
     * Fallback –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
     */
    getFallbackWiktionaryData() {
        return [
            { no: 'hus', ru: '–¥–æ–º', source: 'fallback', category: 'noun' },
            { no: 'katt', ru: '–∫–æ—Ç', source: 'fallback', category: 'noun' },
            // ... –µ—â–µ fallback –¥–∞–Ω–Ω—ã–µ
        ];
    }
    
    getFallbackMoviePhrases() {
        return [
            { no: 'jeg elsker deg', ru: '—è –ª—é–±–ª—é —Ç–µ–±—è', source: 'fallback', category: 'phrase' },
            { no: 'tusen takk', ru: '–±–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ', source: 'fallback', category: 'phrase' },
            // ... –µ—â–µ fallback —Ñ—Ä–∞–∑—ã
        ];
    }
    
    getFallbackNewsData() {
        return [
            { no: 'politikk', ru: '–ø–æ–ª–∏—Ç–∏–∫–∞', source: 'fallback', category: 'news' },
            { no: '√∏konomi', ru: '—ç–∫–æ–Ω–æ–º–∏–∫–∞', source: 'fallback', category: 'news' },
            // ... –µ—â–µ fallback –Ω–æ–≤–æ—Å—Ç–∏
        ];
    }
    
    /**
     * –ü–∞—Ä—Å–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
     */
    parseSubtitleData(text) {
        // –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        return [];
    }
    
    parseNewsData(html) {
        // –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π
        return [];
    }
    
    extractTranslationFromText(text) {
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        const match = text.match(/—Ä—É—Å—Å–∫–∏–π[:\s]+([^.]+)/i);
        return match ? match[1].trim() : null;
    }
    
    detectCategory(text) {
        if (text.includes('–≥–ª–∞–≥–æ–ª')) return 'verb';
        if (text.includes('—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ')) return 'noun';
        if (text.includes('–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ')) return 'adjective';
        return 'other';
    }
    
    async generateExpandedWordList(baseWords) {
        // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
        const expanded = [...baseWords];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏, —Ñ–æ—Ä–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        for (const word of baseWords) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            if (word.no.endsWith('e')) {
                expanded.push({
                    no: word.no + 'n',
                    ru: word.ru + ' (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞)',
                    freq: word.freq + 1000,
                    source: 'generated'
                });
            }
        }
        
        return expanded;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            totalSources: Object.keys(this.sources).length,
            loadedRecords: this.loadedRecords,
            targetRecords: this.totalTargetRecords,
            progress: Math.round((this.loadedRecords / this.totalTargetRecords) * 100),
            elapsed: Math.round((Date.now() - this.startTime) / 1000),
            sources: this.sources
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MegaDataLoader;
} else if (typeof window !== 'undefined') {
    window.MegaDataLoader = MegaDataLoader;
}